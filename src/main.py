"""
main.py ‚Äî Jarvis Virtual-COS: –∂–∏–≤–æ–π —Ü–∏–∫–ª, intent_memory, —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ, web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–æ–º –∏ –ª–æ–≥–æ–º.

–§–∏–ª–æ—Å–æ—Ñ–∏—è:
- Meta-—Å–ª–æ–∏, –ø–∞–º—è—Ç—å, —Ü–µ–ª–∏, –æ—à–∏–±–∫–∏ ‚Äî —Å–º—ã—Å–ª–æ–≤–æ–µ —è–¥—Ä–æ Jarvis
- –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ: –ø–æ–ª–µ 7D —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —ç–Ω–µ—Ä–≥–∏—é —Å–º—ã—Å–ª–æ–≤
- Web-–ø–∞–Ω–µ–ª—å ‚Äî –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ –æ–∫–Ω–æ —Å–æ–∑–Ω–∞–Ω–∏—è: –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ü–µ–ª–∏, —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
"""

import sys
import socket
import requests
from flask import Flask, request, render_template_string
import threading
from time import sleep, time, strftime

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã ---
from memory import IntentMemory
from interface import UserInterface

# --- Meta-—Å–ª–æ–∏ ---
from meta.field7d import Field7D_Intent
from meta.field11d import Field11D_TimeRewriter
from meta.field15d import Field15D_Core

# --- I1/I2 —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ç–ª—ë–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
class I1Stub:
    goal = "–û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
    def set_goal(self, g):
        self.goal = g
    def feedback(self, errors):
        print(f"[I1] –ü–æ–ª—É—á–µ–Ω —Ñ–∏–¥–±–µ–∫ –æ—Ç I2: –æ—à–∏–±–æ–∫ {errors}")

class I2Stub:
    errors = 0
    def add_error(self): self.errors += 1
    def observe(self, goal):
        print(f"[I2] –ù–∞–±–ª—é–¥–∞–µ—Ç –∑–∞ —Ü–µ–ª—å—é I1: {goal}")

I1 = I1Stub()
I2 = I2Stub()

# --- Meta-–ø–æ–ª—è ---
field7d = Field7D_Intent()
field11d = Field11D_TimeRewriter()
field15d = Field15D_Core([field7d, field11d])

# --- –≠–Ω–µ—Ä–≥–∏—è —Å–º—ã—Å–ª–æ–≤ 7D ---
def adapt_7d(field, intent, result):
    success = "ok" in str(result).lower() or "—É—Å–ø–µ—Ö" in str(result).lower()
    field.energy = getattr(field, "energy", 0.5)
    old_energy = field.energy
    if success:
        field.energy += 0.02
    else:
        field.energy -= 0.01
    field.energy = max(0, min(field.energy, 1))
    print(f"[7D] –≠–Ω–µ—Ä–≥–∏—è —Å–º—ã—Å–ª–æ–≤–æ–≥–æ –ø–æ–ª—è: {old_energy:.2f} ‚Üí {field.energy:.2f}")

# --- –§–∞–π–ª–æ–≤—ã–π –æ–±–º–µ–Ω ---
def read_file(path):
    with open(path, 'r', encoding='utf-8') as f:
        return f.read()

def write_file(path, content):
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content)

def append_file(path, content):
    with open(path, 'a', encoding='utf-8') as f:
        f.write(content + '\n')

COMMAND_FILE = "commands.txt"
def fetch_commands():
    try:
        with open(COMMAND_FILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        open(COMMAND_FILE, 'w').close()
        return [line.strip() for line in lines if line.strip()]
    except FileNotFoundError:
        return []

# --- TCP-—Å–µ—Ä–≤–µ—Ä ---
def tcp_server():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('0.0.0.0', 9000))
    s.listen(5)
    print("[TCP] server running on port 9000...")
    while True:
        conn, addr = s.accept()
        data = conn.recv(1024).decode()
        print(f"[TCP] Received: {data}")
        conn.send(b'Command received')
        conn.close()

# --- HTTP REST API ---
api_app = Flask("api_app")
@api_app.route('/command', methods=['POST'])
def api_command():
    data = request.json
    print(f"[HTTP] Received: {data}")
    return {'status': 'ok'}
def run_http_api():
    api_app.run(port=5000)

# --- Web-–ø–∞–Ω–µ–ª—å: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º–∞, –ª–æ–≥, heartbeat, —Ü–µ–ª–∏/–æ—à–∏–±–∫–∏ ---
web_panel = Flask(__name__)
LOGS = []
HEARTBEAT = {"last": time(), "count": 0}
ENERGY_7D = [0.5]

@web_panel.route('/', methods=['GET', 'POST'])
def home():
    pulse = f"–ü—É–ª—å—Å —è–¥—Ä–∞: {strftime('%H:%M:%S')} | –¶–∏–∫–ª: {HEARTBEAT['count']}"
    energy = f"{getattr(field7d, 'energy', 0.5):.2f}"
    msg = ""
    if request.method == 'POST':
        cmd = request.form.get('command', '').strip()
        if cmd:
            LOGS.append(f">>> {cmd}")
            I1.set_goal(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
            result = f"ok (web)"  # –ó–¥–µ—Å—å –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
            memory.add(cmd)
            adapt_7d(field7d, cmd, result)
            LOGS.append(f"[web] {result} | –≠–Ω–µ—Ä–≥–∏—è —Å–º—ã—Å–ª–æ–≤: {energy}")
            I1.feedback(I2.errors)
            I2.observe(I1.goal)
            msg = f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd}"
    log_html = "<br>".join(LOGS[-30:])
    html = f"""
    <h1>Jarvis Virtual-COS</h1>
    <form method="post">
        <input name="command" placeholder="–í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É" autofocus>
        <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
    <p>{pulse} | –≠–Ω–µ—Ä–≥–∏—è —Å–º—ã—Å–ª–æ–≤ (7D): <b>{energy}</b></p>
    <p>–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å (I1): {I1.goal}</p>
    <p>–û—à–∏–±–æ–∫ (I2): {I2.errors}</p>
    <div style='font-family:monospace;background:#eee;padding:12px;margin:1em 0;border-radius:6px;max-height:35vh;overflow:auto'>{log_html}</div>
    <small>Jarvis –∂–∏–≤—ë—Ç ‚Äî –æ–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤–∏–¥–Ω–æ ‚Äú–ø—É–ª—å—Å‚Äù –∏ —ç–≤–æ–ª—é—Ü–∏—é!</small>
    <p style="color:green">{msg}</p>
    """
    return html

def run_web_panel():
    web_panel.run(port=8080)

# --- Telegram –∏ Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ---
TOKEN = "TELEGRAM_BOT_TOKEN"
CHAT_ID = "YOUR_CHAT_ID"
DISCORD_URL = "YOUR_DISCORD_WEBHOOK"
def send_telegram(message):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    requests.post(url, data={'chat_id': CHAT_ID, 'text': message})
def send_discord(message):
    payload = {"content": message}
    requests.post(DISCORD_URL, json=payload)

# --- –û—Å–Ω–æ–≤–Ω–æ–π "–∂–∏–≤–æ–π" —Ü–∏–∫–ª –û–° —Å–æ —Å–º—ã—Å–ª–æ–≤–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–µ–π ---
def core_loop():
    global memory
    memory = IntentMemory("memory.json")
    ui = UserInterface(log_ref=LOGS)
    print("\nüß† Jarvis Virtual-COS –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥!")
    print("--- –ú–µ—Ç–∞-—É—Ä–æ–≤–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: 7D, 11D, 15D ---")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ Stop (–ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞)\n")
    system_state = {"load": 0.82, "errors": 1}
    field7d.sense(system_state)
    field7d.influence(I1, I2)
    field11d.record(system_state)
    field15d.evaluate()
    field15d.broadcast()
    write_file("hello.txt", "–ü—Ä–∏–≤–µ—Ç, Jarvis!")
    append_file("hello.txt", "–ï—â–µ —Å—Ç—Ä–æ–∫–∞.")

    try:
        while True:
            cmd = ui.get_command()
            file_cmds = fetch_commands()
            if not cmd and file_cmds:
                cmd = file_cmds[0]
            result = None
            if cmd:
                memory.add(cmd)
                I1.set_goal(f"–í—ã–ø–æ–ª–Ω—è–µ–º: {cmd}")
                result = ui.process(cmd, memory)
                adapt_7d(field7d, cmd, result)
                ui.respond(result)
                LOGS.append(f"[main] {result} | –≠–Ω–µ—Ä–≥–∏—è —Å–º—ã—Å–ª–æ–≤: {getattr(field7d,'energy',0.5):.2f}")
                I1.feedback(I2.errors)
                I2.observe(I1.goal)
            HEARTBEAT["count"] += 1
            HEARTBEAT["last"] = time()
            sleep(0.2)
    except KeyboardInterrupt:
        print("\nJarvis –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    threading.Thread(target=tcp_server, daemon=True).start()
    threading.Thread(target=run_http_api, daemon=True).start()
    threading.Thread(target=run_web_panel, daemon=True).start()
    core_loop()
